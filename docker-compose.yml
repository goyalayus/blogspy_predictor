services:
  # =======================================================
  #  Application Services (no changes here)
  # =======================================================
  python-api:
    build: { context: ., dockerfile: Dockerfile }
    container_name: python-api
    restart: unless-stopped
    ports: ["8000:8000"]
    volumes: ["./logs:/app/logs"]
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - LOG_FILE=/app/logs/python_api.log
      - LOG_LEVEL=INFO
    networks: [app-net]
    depends_on: { redis: { condition: service_healthy } }

  go-worker:
    build: { context: ./src/woker, dockerfile: Dockerfile }
    container_name: go-worker
    restart: unless-stopped
    command: ["/worker"]
    volumes: ["./logs:/logs"]
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - ML_API_URL=http://python-api:8000
      - REDIS_ADDR=redis:6379
      - LOG_FILE=/logs/worker.log
      - LOG_LEVEL=INFO
    networks: [app-net]
    depends_on: { python-api: { condition: service_started }, redis: { condition: service_healthy } }

  go-reaper:
    build: { context: ./src/woker, dockerfile: Dockerfile }
    container_name: go-reaper
    restart: unless-stopped
    command: ["/reaper"]
    volumes: ["./logs:/logs"]
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_ADDR=redis:6379
      - LOG_FILE=/logs/reaper.log
      - LOG_LEVEL=INFO
      - ML_API_URL=http://python-api:8000
    networks: [app-net]
    depends_on:
      redis: { condition: service_healthy }
      opensearch-node: { condition: service_healthy }

  # =======================================================
  #  Supporting Infrastructure (redis is unchanged)
  # =======================================================
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports: ["6379:6379"]
    volumes: [redis-data:/data]
    networks: [app-net]
    healthcheck: { test: ["CMD", "redis-cli", "ping"], interval: 10s, timeout: 5s, retries: 5 }

  # =======================================================
  #  Log Management Stack (MAJOR CHANGES HERE)
  # =======================================================
  opensearch-node:
    image: opensearchproject/opensearch:2.15.0 # Back to the latest version
    container_name: opensearch-node
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      # This variable is read from the .env file to set the password on first boot
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_INITIAL_ADMIN_PASSWORD}
    volumes: [opensearch-data:/usr/share/opensearch/data]
    ports: ["9200:9200"]
    networks: [app-net]
    healthcheck:
      # Secure healthcheck using the default admin user and the password from the .env file
      test: ["CMD-SHELL", "curl -sS --fail -u 'admin:${OPENSEARCH_INITIAL_ADMIN_PASSWORD}' http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      interval: 30s
      timeout: 10s
      retries: 5

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.15.0
    container_name: opensearch-dashboards
    restart: unless-stopped
    ports: ["5601:5601"]
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch-node:9200"]' # Protocol changes to https
      # We REMOVE the security disabled flag. It will default to enabled.
    networks: [app-net]
    depends_on: { opensearch-node: { condition: service_healthy } }

  vector:
    image: timberio/vector:0.36.0-debian
    container_name: vector-log-collector
    restart: unless-stopped
    volumes:
      - ./vector/vector.toml:/etc/vector/vector.toml:ro
      - ./logs:/var/log/app:ro
    environment:
      # Provide credentials to Vector so it can write to the secure OpenSearch
      - OPENSEARCH_USERNAME=admin
      - OPENSEARCH_PASSWORD=${OPENSEARCH_INITIAL_ADMIN_PASSWORD}
    networks: [app-net]
    depends_on: { opensearch-node: { condition: service_healthy } }

volumes:
  opensearch-data:
  redis-data:

networks:
  app-net:
    driver: bridge
