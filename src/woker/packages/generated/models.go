// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package generated

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/pgvector/pgvector-go"
)

type CrawlStatus string

const (
	CrawlStatusPendingClassification CrawlStatus = "pending_classification"
	CrawlStatusPendingCrawl          CrawlStatus = "pending_crawl"
	CrawlStatusClassifying           CrawlStatus = "classifying"
	CrawlStatusCrawling              CrawlStatus = "crawling"
	CrawlStatusCompleted             CrawlStatus = "completed"
	CrawlStatusFailed                CrawlStatus = "failed"
	CrawlStatusIrrelevant            CrawlStatus = "irrelevant"
)

func (e *CrawlStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CrawlStatus(s)
	case string:
		*e = CrawlStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CrawlStatus: %T", src)
	}
	return nil
}

type NullCrawlStatus struct {
	CrawlStatus CrawlStatus
	Valid       bool // Valid is true if CrawlStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCrawlStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CrawlStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CrawlStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCrawlStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CrawlStatus), nil
}

type RenderingType string

const (
	RenderingTypeSSR RenderingType = "SSR"
	RenderingTypeCSR RenderingType = "CSR"
)

func (e *RenderingType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RenderingType(s)
	case string:
		*e = RenderingType(s)
	default:
		return fmt.Errorf("unsupported scan type for RenderingType: %T", src)
	}
	return nil
}

type NullRenderingType struct {
	RenderingType RenderingType
	Valid         bool // Valid is true if RenderingType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRenderingType) Scan(value interface{}) error {
	if value == nil {
		ns.RenderingType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RenderingType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRenderingType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RenderingType), nil
}

type SystemCounter struct {
	CounterName string
	Value       int64
	UpdatedAt   pgtype.Timestamptz
}

type Url struct {
	ID            int64
	Url           string
	Netloc        string
	Status        CrawlStatus
	Rendering     NullRenderingType
	ErrorMessage  pgtype.Text
	LockedAt      pgtype.Timestamptz
	ProcessedAt   pgtype.Timestamptz
	PagerankScore pgtype.Float4
}

type UrlContent struct {
	UrlID        int64
	Title        pgtype.Text
	Description  pgtype.Text
	Content      pgtype.Text
	SearchVector interface{}
	Embedding    pgvector.Vector
}

type UrlEdge struct {
	SourceUrlID int64
	DestUrlID   int64
}
